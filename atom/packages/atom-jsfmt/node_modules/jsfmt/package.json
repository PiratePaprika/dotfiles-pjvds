{
  "name": "jsfmt",
  "description": "gofmt for javascript",
  "version": "0.3.0",
  "homepage": "https://github.com/rdio/jsfmt",
  "main": "./lib/index.js",
  "engines": {
    "node": ">=0.4.0"
  },
  "bin": {
    "jsfmt": "./bin/jsfmt"
  },
  "scripts": {
    "test": "grunt"
  },
  "files": [
    "bin",
    "lib",
    "LICENSE.MD"
  ],
  "maintainers": [
    {
      "name": "Jim Fleming",
      "email": "jim.fleming@rd.io"
    }
  ],
  "dependencies": {
    "falafel": "^0.3.1",
    "rocambole": "^0.3.3",
    "esformatter": "^0.1.1",
    "escodegen": "^1.3.2",
    "esprima": "^1.2.2",
    "underscore": "^1.6.0",
    "tmp": "^0.0.23",
    "docopt": "^0.4.0",
    "rc": "^0.3.5",
    "glob": "^4.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rdio/jsfmt"
  },
  "bugs": {
    "url": "https://github.com/rdio/jsfmt/issues"
  },
  "licenses": [
    {
      "type": "Apache2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "keywords": [
    "ast",
    "javascript",
    "parser",
    "rewrite",
    "syntax",
    "format"
  ],
  "devDependencies": {
    "mocha": "^1.18.2",
    "should": "^3.3.1",
    "grunt": "~0.4.5",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-mocha-test": "~0.11.0",
    "grunt-exec": "~0.4.5",
    "mocha-lcov-reporter": "0.0.1",
    "jscoverage": "~0.3.8",
    "coveralls": "~2.8.0"
  },
  "readme": "jsfmt\n===\n\n[![NPM version](https://badge.fury.io/js/jsfmt.svg)](http://badge.fury.io/js/jsfmt)\n[![Build Status](https://travis-ci.org/rdio/jsfmt.svg?branch=master)](https://travis-ci.org/rdio/jsfmt)\n[![Dependency Status](https://david-dm.org/rdio/jsfmt.png)](https://david-dm.org/rdio/jsfmt)\n[![Coverage Status](https://coveralls.io/repos/rdio/jsfmt/badge.png)](https://coveralls.io/r/rdio/jsfmt)\n\nFor formatting, searching, and rewriting JavaScript. Analogous to [`gofmt`](http://golang.org/cmd/gofmt/).\n\nInstallation\n---\n\n`npm install -g jsfmt`\n\nUsage\n---\n\n```\n$ jsfmt --help\nUsage:\n  jsfmt [--no-format] [--diff|--list|--write] [--rewrite PATTERN|--search PATTERN] [<file>...]\n  jsfmt (--version | --help)\n\nOptions:\n  -h --help                      Show this help text\n  -v --version                   Show jsfmt version\n  -d --diff                      Show diff against original file\n  -l --list                      List the files which differ from jsfmt output\n  --no-format                    Do not format the input file(s)\n  -w --write                     Overwrite the original file with jsfmt output\n  -r=PATTERN --rewrite PATTERN   Rewrite rule (e.g., 'a.slice(b, len(a) -> a.slice(b)')\n  -s=PATTERN --search PATTERN    Search rule (e.g., 'a.slice')\n```\n\nIf no path is given it will read from `stdin`. A directory path will recurse over all *.js files in the directory.\n\nFormatting\n---\n\nFor formatting `jsfmt` uses [esformatter](https://github.com/millermedeiros/esformatter).\n\n### .jsfmtrc\n\nAny of the [esformatter](https://github.com/millermedeiros/esformatter) formatting\noptions can be overwritten via a `.jsfmtrc` file. The file is parsed using\n[rc](https://github.com/dominictarr/rc), which accepts either a `json` or `ini` formatted file.\n\n`jsfmt` will also attempt to pickup and use the configured `indent`\nvariable from your `.jshintrc` configuration file, if present.\n\nA config file can be manually specified using `--config config.json`.\n\nRewriting\n---\n\nThe `--rewrite` flag allows rewriting portions of the JavaScript's AST before formatting. This is especially handy for intelligent renaming and handling API changes from a library. The rewrite rule must be a string of the form:\n\n    pattern -> replacement\n\nBoth `pattern` and `replacement` must be valid JavaScript. In `pattern`, single-character lowercase identifiers serve as wildcards matching arbitrary expressions; those expressions will be substituted for the same identifiers in the `replacement`.\n\n### Example\n\nRewrite occurences of `_.reduce` to use native reduce:\n\n    jsfmt --rewrite \"_.reduce(a, b, c) -> a.reduce(b, c)\" reduce.js\n\nSearching\n---\n\nThe `--search` flag allows searching through a JavaScript's AST. The search rule is very similar to the rewrite rule but just outputs expressions that match the given search expression. The search expression must be valid JavaScript.\n\n### Example\n\nFind occurences of `_.reduce`:\n\n    jsfmt --search \"_.reduce(a, b, c)\" reduce.js\n\nValidating\n---\n\nThe `--validate` flag will print any errors found by esprima while parsing the JavaScript.\n\n### Example\n\n    jsfmt --validate bad.js\n\nAPI\n---\n\n### Formatting\n\n```javascript\njsfmt.format(<javascript_string>, <config_object>) // Returns formatted JavaScript\n```\n\n```javascript\nvar config = jsfmt.getConfig(); // Loads the jsfmt config from the appropriate rc file or default config object\n```\n\n#### Example\n\n```javascript\nvar jsfmt = require('jsfmt');\nvar fs = require('fs');\n\nvar js = fs.readFileSync('unformatted.js');\nvar config = jsfmt.getConfig();\n\njs = jsfmt.format(js, config);\n```\n\n### Rewriting\n\n```javascript\njsfmt.rewrite(<javascript_string>, <rewrite_rule>) // Returns rewritten JavaScript\n```\n\n#### Example\n\n```javascript\nvar jsfmt = require('jsfmt');\nvar fs = require('fs');\n\nvar js = fs.readFileSync('each.js');\n\njs = jsfmt.rewrite(js, \"_.each(a, b) -> a.forEach(b)\");\n```\n\n### Searching\n\n```javascript\njsfmt.search(<javascript_string>, <search_expression>) // Returns array of matches\n```\n\n#### Example\n\n```javascript\nvar jsfmt = require('jsfmt');\nvar fs = require('fs');\n\nvar js = fs.readFileSync('component.js');\n\njsfmt.search(js, \"R.Component.create(a, { dependencies: z })\").forEach(function(matches, wildcards) {\n  console.log(wildcards.z);\n});\n```\n\n### Validating\n\n```javascript\njsfmt.validate(<javascript_string>) // Returns errors found while parsing JavaScript\n```\n\n#### Example\n\n```javascript\nvar jsfmt = require('jsfmt');\nvar fs = require('fs');\n\nvar js = fs.readFileSync('each.js');\nvar errors = jsfmt.validate(js);\n\nfor (var i = 0; i < errors.length; i++) {\n  console.error(errors[i]);\n}\n```\n\nLinks\n---\n\n- Atom Package - https://atom.io/packages/atom-jsfmt - \"Automatically run jsfmt every time you save a JavaScript source file.\"\n- Grunt Task - https://github.com/james2doyle/grunt-jsfmt - \"A task for the jsfmt library.\"\n- Emacs Plugin - https://github.com/brettlangdon/jsfmt.el - \"Run jsfmt from within emacs\"\n\nChangelog\n---\n\n### v0.3.0\n\n- Added CONTRIBUTING\n- Added tests\n- Added Gruntfile for development\n- Added CI support\n- Added style guide\n- Added default formatting config\n- Exposed `jsfmt.getConfig` api method for loading jsfmt config\n- Exposed `jsfmt.format(js[, options])` api method for formatting\n- Added `--validate` option and exposed `jsfmt.validate` api method\n- Pinned dependencies\n\n### v0.2.0\n\n- Add [rc](https://github.com/dominictarr/rc) and `--config config.json` support for formatting configuration\n- Making `--format` the default action\n- Fix support for shebang at the top of js files, e.g. `#!/usr/bin/env node`\n- Fix jsfmt diff mode where whitespace was unaccounted for due to `-b` git diff option\n\n### v0.1.1\n\n- Initial release\n\nLicense\n---\nApache License, Version 2.0. Copyright 2014 Rdio, Inc.\n",
  "readmeFilename": "README.md",
  "_id": "jsfmt@0.3.0",
  "dist": {
    "shasum": "0d74e69c61e7144b4f40ca52c883dc9351e03156"
  },
  "_resolved": "git://github.com/rdio/jsfmt.git#409621868fc8772f6b60e429619aa96363ea945f",
  "_from": "jsfmt@git://github.com/rdio/jsfmt.git#409621868fc"
}
